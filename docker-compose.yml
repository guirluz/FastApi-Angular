
services:
  usuarios_db:
    image: mysql:8.0
    container_name: usuarios_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
    expose:               # solo visible dentro de la red interna
      - "3306"
    volumes:
      - db_data:/var/lib/mysql
      - ./docker/mysql:/docker-entrypoint-initdb.d
    healthcheck:          # healthcheck para MySQL
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-p${DB_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s
    networks:
      - internal_net

  fastapi_backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: fastapi_backend
    restart: always
    env_file:
      - ./backend/.env
    ports:                # este sÃ­ lo expones porque lo usas desde Postman/Angular
      - "8000:8000"
    depends_on:
      usuarios_db:
        condition: service_healthy
      redis_usuarios:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - ./backend/app/uploads:/app/uploads
    command: >
      sh -c "
        echo 'Esperando 10 segundos para que la base de datos y Redis estÃ©n listos...' &&
        sleep 10 &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import urllib.request; urllib.request.urlopen(\"http://localhost:8000/docs\")'"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - internal_net
      - default

  redis_usuarios:
    image: redis:7.2
    container_name: redis_usuarios
    restart: always
    expose:               # solo visible dentro de la red interna
      - "6379"
    healthcheck:          # healthcheck para Redis
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal_net

  celery_worker:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: celery_worker
    command: celery -A app.tasks worker --loglevel=info
    depends_on:
      fastapi_backend:
        condition: service_started
      redis_usuarios:
        condition: service_healthy
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/app
      - ./backend/app/uploads:/app/uploads
    networks:
      - internal_net
  
  angular_frontend:
    build:
      context: ./frontend/user-management
      dockerfile: Dockerfile
    container_name: angular_frontend
    restart: always
    ports:
      - "4200:4200"   # ðŸ‘ˆ CAMBIADO: ahora mapea 4200:4200
    depends_on:
      fastapi_backend:
        condition: service_started
    volumes:
      - ./frontend/user-management:/app   # ðŸ‘ˆ AGREGADO: para hot-reload
      - /app/node_modules                  # ðŸ‘ˆ AGREGADO: evita sobrescribir node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4200"]  # ðŸ‘ˆ CAMBIADO
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - default

volumes:
  db_data:

networks:
  internal_net:
    internal: true        # red privada, solo entre contenedores


